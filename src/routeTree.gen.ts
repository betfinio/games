/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SoonImport } from './routes/soon'
import { Route as IndexImport } from './routes/index'
import { Route as RouletteIndexImport } from './routes/roulette/index'
import { Route as PredictIndexImport } from './routes/predict/index'
import { Route as LuroIndexImport } from './routes/luro/index'
import { Route as PredictPairImport } from './routes/predict/$pair'
import { Route as LuroSoonImport } from './routes/luro/soon'

// Create/Update Routes

const SoonRoute = SoonImport.update({
  path: '/soon',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const RouletteIndexRoute = RouletteIndexImport.update({
  path: '/roulette/',
  getParentRoute: () => rootRoute,
} as any)

const PredictIndexRoute = PredictIndexImport.update({
  path: '/predict/',
  getParentRoute: () => rootRoute,
} as any)

const LuroIndexRoute = LuroIndexImport.update({
  path: '/luro/',
  getParentRoute: () => rootRoute,
} as any)

const PredictPairRoute = PredictPairImport.update({
  path: '/predict/$pair',
  getParentRoute: () => rootRoute,
} as any)

const LuroSoonRoute = LuroSoonImport.update({
  path: '/luro/soon',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/soon': {
      id: '/soon'
      path: '/soon'
      fullPath: '/soon'
      preLoaderRoute: typeof SoonImport
      parentRoute: typeof rootRoute
    }
    '/luro/soon': {
      id: '/luro/soon'
      path: '/luro/soon'
      fullPath: '/luro/soon'
      preLoaderRoute: typeof LuroSoonImport
      parentRoute: typeof rootRoute
    }
    '/predict/$pair': {
      id: '/predict/$pair'
      path: '/predict/$pair'
      fullPath: '/predict/$pair'
      preLoaderRoute: typeof PredictPairImport
      parentRoute: typeof rootRoute
    }
    '/luro/': {
      id: '/luro/'
      path: '/luro'
      fullPath: '/luro'
      preLoaderRoute: typeof LuroIndexImport
      parentRoute: typeof rootRoute
    }
    '/predict/': {
      id: '/predict/'
      path: '/predict'
      fullPath: '/predict'
      preLoaderRoute: typeof PredictIndexImport
      parentRoute: typeof rootRoute
    }
    '/roulette/': {
      id: '/roulette/'
      path: '/roulette'
      fullPath: '/roulette'
      preLoaderRoute: typeof RouletteIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexRoute,
  SoonRoute,
  LuroSoonRoute,
  PredictPairRoute,
  LuroIndexRoute,
  PredictIndexRoute,
  RouletteIndexRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/soon",
        "/luro/soon",
        "/predict/$pair",
        "/luro/",
        "/predict/",
        "/roulette/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/soon": {
      "filePath": "soon.tsx"
    },
    "/luro/soon": {
      "filePath": "luro/soon.tsx"
    },
    "/predict/$pair": {
      "filePath": "predict/$pair.tsx"
    },
    "/luro/": {
      "filePath": "luro/index.tsx"
    },
    "/predict/": {
      "filePath": "predict/index.tsx"
    },
    "/roulette/": {
      "filePath": "roulette/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
